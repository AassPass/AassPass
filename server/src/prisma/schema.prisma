generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
}

model Admin {
  id        String   @id @default(uuid())
  adminId   String   @unique
  email     String   @unique
  password  String
  name      String
  mobile    String
  role      Role     @default(ADMIN)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Created by SuperAdmin
  createdById          String?
  createdBy            Admin?     @relation("AdminCreatedBy", fields: [createdById], references: [id])
  subAdmins            Admin[]    @relation("AdminCreatedBy")
  registeredBusinesses Business[]
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum SubscriptionType {
  STANDARD
  PREMIUM
}

enum BusinessType {
  RETAIL_STORE          @map("Retail Store")
  RESTAURANT_CAFE       @map("Restaurant / Caf√©")
  SALON_SPA             @map("Salon / Spa")
  GYM_FITNESS           @map("Gym / Fitness Center")
  MEDICAL_HEALTH        @map("Medical / Health Store")
  SERVICE_PROVIDER      @map("Service Provider")
  FREELANCER_CONSULTANT @map("Freelancer / Consultant")
  EVENT_ORGANIZER       @map("Event Organizer")
  EDUCATION_COACHING    @map("Education / Coaching")
  HOME_BASED            @map("Home-based Business")
  REAL_ESTATE_RENTALS   @map("Real Estate / Rentals")
  COURIER_DELIVERY      @map("Courier / Delivery")
  AUTOMOBILE_SERVICES   @map("Automobile Services")
  PET_SERVICES          @map("Pet Services")
  NGO_COMMUNITY         @map("NGO / Community Org.")
  SHOP_STORE_OFFICE     @map("Shop/Store/Office")
  OTHER                 @map("Other")
}

model Business {
  id                 String             @id @default(uuid())
  businessId         String             @unique
  businessName       String
  ownerName          String?
  phoneNumber        String?
  profilePicture     String?
  bannerPicture      String?
  emailAddress       String             @unique
  address            String?
  verificationStatus VerificationStatus
  subscriptionType   SubscriptionType?
  gstNumber          String?
  websiteLink        String?
  businessType       BusinessType?
  joinedDate         DateTime           @default(now())

  createdById  String?
  registeredBy Admin?  @relation(fields: [createdById], references: [id])

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  latitude  Float?
  longitude Float?

  socialLinks SocialLink[]
  ads         Ads[]

  @@index([businessId])
}

model SocialLink {
  id         String   @id @default(uuid())
  platform   String
  link       String
  business   Business @relation(fields: [businessId], references: [id])
  businessId String
}

enum AdCategory {
  DEALS_DISCOUNTS    @map("Deals & Discounts")
  EVENTS             @map("Events")
  SERVICES           @map("Services")
  PRODUCTS_FOR_SALE  @map("Products for Sale")
  JOB_OPENINGS       @map("Job Openings")
  RENTALS_PROPERTIES @map("Rentals & Properties")
  ANNOUNCEMENTS      @map("Announcements")
  CONTESTS_GIVEAWAYS @map("Contests & Giveaways")
}

enum AdStage {
  DRAFT
  SAVED
}

enum AdImageType {
  BANNER
  NORMAL
}

model AdImage {
  id   String      @id @default(uuid())
  url  String
  adId String
  type AdImageType @default(NORMAL)
  ad   Ads         @relation(fields: [adId], references: [id])

  @@index([adId])
}

model Ads {
  id                 String             @id @default(uuid())
  adId               String             @unique
  title              String
  category           AdCategory
  verificationStatus VerificationStatus @default(PENDING)
  visibleFrom        DateTime
  visibleTo          DateTime
  stage              AdStage
  reset              Boolean            @default(false)
  businessId         String
  business           Business           @relation(fields: [businessId], references: [id])

  images   AdImage[]
  metadata Json?
}

enum UserRole {
  USER
  OWNER
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  name          String
  mobile        String   @default("0000000000")
  emailVerified Boolean  @default(false)
  role          UserRole @default(USER)

  businesses Business[]
}
