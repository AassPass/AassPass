generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
}

model SuperAdmin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(SUPER_ADMIN)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One SuperAdmin creates many Admins
  admins Admin[]
}

model Admin {
  id        String   @id @default(uuid())
  adminId   String   @unique
  email     String   @unique
  password  String
  name      String
  mobile    String   @default("0000000000")
  role      Role     @default(ADMIN)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Created by SuperAdmin
  createdById String
  createdBy   SuperAdmin @relation(fields: [createdById], references: [id])
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum SubscriptionType {
  STANDARD
  PREMIUM
}

enum BusinessType {
  RETAIL_STORE           @map("Retail Store")
  RESTAURANT_CAFE        @map("Restaurant / Caf√©")
  SALON_SPA              @map("Salon / Spa")
  GYM_FITNESS            @map("Gym / Fitness Center")
  MEDICAL_HEALTH         @map("Medical / Health Store")
  SERVICE_PROVIDER       @map("Service Provider")
  FREELANCER_CONSULTANT  @map("Freelancer / Consultant")
  EVENT_ORGANIZER        @map("Event Organizer")
  EDUCATION_COACHING     @map("Education / Coaching")
  HOME_BASED             @map("Home-based Business")
  REAL_ESTATE_RENTALS    @map("Real Estate / Rentals")
  COURIER_DELIVERY       @map("Courier / Delivery")
  AUTOMOBILE_SERVICES    @map("Automobile Services")
  PET_SERVICES           @map("Pet Services")
  NGO_COMMUNITY          @map("NGO / Community Org.")
  SHOP_STORE_OFFICE      @map("Shop/Store/Office")
  OTHER                  @map("Other")
}


model Business {
  id                 String             @id @default(uuid())
  businessId         String             @unique
  businessName       String
  ownerName          String?
  phoneNumber        String?
  emailAddress       String             @unique
  password           String?
  address            String?
  verificationStatus VerificationStatus
  subscriptionType   SubscriptionType?
  gstNumber          String?
  websiteLink        String?
  businessType       BusinessType?
  joinedDate         DateTime           @default(now())

  latitude  Float?
  longitude Float?

  socialLinks SocialLink[]
  ads         Ads[]

  @@index([businessId])
}

model SocialLink {
  id         String   @id @default(uuid())
  platform   String
  link       String
  business   Business @relation(fields: [businessId], references: [id])
  businessId String
}

enum AdCategory {
  DEALS_DISCOUNTS     @map("Deals & Discounts")
  EVENTS              @map("Events")
  SERVICES            @map("Services")
  PRODUCTS_FOR_SALE   @map("Products for Sale")
  JOB_OPENINGS        @map("Job Openings")
  RENTALS_PROPERTIES  @map("Rentals & Properties")
  ANNOUNCEMENTS       @map("Announcements")
  CONTESTS_GIVEAWAYS  @map("Contests & Giveaways")
}

enum AdStage {
  DRAFT
  SAVED
}

model Ads {
  id                 String             @id @default(uuid())
  adId               String             @unique
  title              String
  category           AdCategory
  verificationStatus VerificationStatus @default(PENDING)
  visibleFrom        DateTime
  visibleTo          DateTime
  imageUrl           String
  stage              AdStage
  reset              Boolean            @default(false)
  businessId         String
  business           Business           @relation(fields: [businessId], references: [id])
}
